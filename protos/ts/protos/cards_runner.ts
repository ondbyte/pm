// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: protos/cards_runner.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../google/protobuf/struct";

export const protobufPackage = "pipeman";

export interface Card {
  name: string;
  in: { [key: string]: any } | undefined;
  out: { [key: string]: any } | undefined;
}

export interface Cards {
  cards: Card[];
}

export interface EmptyReq {
}

export interface CardInputWithCardName {
  card: string;
  input: { [key: string]: any } | undefined;
  output: { [key: string]: any } | undefined;
}

function createBaseCard(): Card {
  return { name: "", in: undefined, out: undefined };
}

export const Card: MessageFns<Card> = {
  encode(message: Card, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.in !== undefined) {
      Struct.encode(Struct.wrap(message.in), writer.uint32(18).fork()).join();
    }
    if (message.out !== undefined) {
      Struct.encode(Struct.wrap(message.out), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Card {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.in = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.out = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Card {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      in: isObject(object.in) ? object.in : undefined,
      out: isObject(object.out) ? object.out : undefined,
    };
  },

  toJSON(message: Card): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.in !== undefined) {
      obj.in = message.in;
    }
    if (message.out !== undefined) {
      obj.out = message.out;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Card>, I>>(base?: I): Card {
    return Card.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Card>, I>>(object: I): Card {
    const message = createBaseCard();
    message.name = object.name ?? "";
    message.in = object.in ?? undefined;
    message.out = object.out ?? undefined;
    return message;
  },
};

function createBaseCards(): Cards {
  return { cards: [] };
}

export const Cards: MessageFns<Cards> = {
  encode(message: Cards, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.cards) {
      Card.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Cards {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCards();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cards.push(Card.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Cards {
    return { cards: globalThis.Array.isArray(object?.cards) ? object.cards.map((e: any) => Card.fromJSON(e)) : [] };
  },

  toJSON(message: Cards): unknown {
    const obj: any = {};
    if (message.cards?.length) {
      obj.cards = message.cards.map((e) => Card.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Cards>, I>>(base?: I): Cards {
    return Cards.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Cards>, I>>(object: I): Cards {
    const message = createBaseCards();
    message.cards = object.cards?.map((e) => Card.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEmptyReq(): EmptyReq {
  return {};
}

export const EmptyReq: MessageFns<EmptyReq> = {
  encode(_: EmptyReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmptyReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmptyReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EmptyReq {
    return {};
  },

  toJSON(_: EmptyReq): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EmptyReq>, I>>(base?: I): EmptyReq {
    return EmptyReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmptyReq>, I>>(_: I): EmptyReq {
    const message = createBaseEmptyReq();
    return message;
  },
};

function createBaseCardInputWithCardName(): CardInputWithCardName {
  return { card: "", input: undefined, output: undefined };
}

export const CardInputWithCardName: MessageFns<CardInputWithCardName> = {
  encode(message: CardInputWithCardName, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.card !== "") {
      writer.uint32(10).string(message.card);
    }
    if (message.input !== undefined) {
      Struct.encode(Struct.wrap(message.input), writer.uint32(18).fork()).join();
    }
    if (message.output !== undefined) {
      Struct.encode(Struct.wrap(message.output), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CardInputWithCardName {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCardInputWithCardName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.card = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.input = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.output = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CardInputWithCardName {
    return {
      card: isSet(object.card) ? globalThis.String(object.card) : "",
      input: isObject(object.input) ? object.input : undefined,
      output: isObject(object.output) ? object.output : undefined,
    };
  },

  toJSON(message: CardInputWithCardName): unknown {
    const obj: any = {};
    if (message.card !== "") {
      obj.card = message.card;
    }
    if (message.input !== undefined) {
      obj.input = message.input;
    }
    if (message.output !== undefined) {
      obj.output = message.output;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CardInputWithCardName>, I>>(base?: I): CardInputWithCardName {
    return CardInputWithCardName.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CardInputWithCardName>, I>>(object: I): CardInputWithCardName {
    const message = createBaseCardInputWithCardName();
    message.card = object.card ?? "";
    message.input = object.input ?? undefined;
    message.output = object.output ?? undefined;
    return message;
  },
};

export interface CardsRunner {
  GetSupportedCards(request: EmptyReq): Promise<Cards>;
  RunCard(request: CardInputWithCardName): Promise<Struct>;
}

export const CardsRunnerServiceName = "pipeman.CardsRunner";
export class CardsRunnerClientImpl implements CardsRunner {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CardsRunnerServiceName;
    this.rpc = rpc;
    this.GetSupportedCards = this.GetSupportedCards.bind(this);
    this.RunCard = this.RunCard.bind(this);
  }
  GetSupportedCards(request: EmptyReq): Promise<Cards> {
    const data = EmptyReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetSupportedCards", data);
    return promise.then((data) => Cards.decode(new BinaryReader(data)));
  }

  RunCard(request: CardInputWithCardName): Promise<Struct> {
    const data = CardInputWithCardName.encode(request).finish();
    const promise = this.rpc.request(this.service, "RunCard", data);
    return promise.then((data) => Struct.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
