// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: protos/cards_runner.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardsRunner_GetSupportedCards_FullMethodName = "/pipeman.CardsRunner/GetSupportedCards"
	CardsRunner_RunCard_FullMethodName           = "/pipeman.CardsRunner/RunCard"
)

// CardsRunnerClient is the client API for CardsRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardsRunnerClient interface {
	GetSupportedCards(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*Cards, error)
	RunCard(ctx context.Context, in *CardInputWithCardName, opts ...grpc.CallOption) (*structpb.Struct, error)
}

type cardsRunnerClient struct {
	cc grpc.ClientConnInterface
}

func NewCardsRunnerClient(cc grpc.ClientConnInterface) CardsRunnerClient {
	return &cardsRunnerClient{cc}
}

func (c *cardsRunnerClient) GetSupportedCards(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*Cards, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cards)
	err := c.cc.Invoke(ctx, CardsRunner_GetSupportedCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsRunnerClient) RunCard(ctx context.Context, in *CardInputWithCardName, opts ...grpc.CallOption) (*structpb.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, CardsRunner_RunCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardsRunnerServer is the server API for CardsRunner service.
// All implementations must embed UnimplementedCardsRunnerServer
// for forward compatibility.
type CardsRunnerServer interface {
	GetSupportedCards(context.Context, *EmptyReq) (*Cards, error)
	RunCard(context.Context, *CardInputWithCardName) (*structpb.Struct, error)
	mustEmbedUnimplementedCardsRunnerServer()
}

// UnimplementedCardsRunnerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardsRunnerServer struct{}

func (UnimplementedCardsRunnerServer) GetSupportedCards(context.Context, *EmptyReq) (*Cards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedCards not implemented")
}
func (UnimplementedCardsRunnerServer) RunCard(context.Context, *CardInputWithCardName) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCard not implemented")
}
func (UnimplementedCardsRunnerServer) mustEmbedUnimplementedCardsRunnerServer() {}
func (UnimplementedCardsRunnerServer) testEmbeddedByValue()                     {}

// UnsafeCardsRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardsRunnerServer will
// result in compilation errors.
type UnsafeCardsRunnerServer interface {
	mustEmbedUnimplementedCardsRunnerServer()
}

func RegisterCardsRunnerServer(s grpc.ServiceRegistrar, srv CardsRunnerServer) {
	// If the following call pancis, it indicates UnimplementedCardsRunnerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardsRunner_ServiceDesc, srv)
}

func _CardsRunner_GetSupportedCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsRunnerServer).GetSupportedCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardsRunner_GetSupportedCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsRunnerServer).GetSupportedCards(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardsRunner_RunCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardInputWithCardName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsRunnerServer).RunCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardsRunner_RunCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsRunnerServer).RunCard(ctx, req.(*CardInputWithCardName))
	}
	return interceptor(ctx, in, info, handler)
}

// CardsRunner_ServiceDesc is the grpc.ServiceDesc for CardsRunner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardsRunner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pipeman.CardsRunner",
	HandlerType: (*CardsRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupportedCards",
			Handler:    _CardsRunner_GetSupportedCards_Handler,
		},
		{
			MethodName: "RunCard",
			Handler:    _CardsRunner_RunCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/cards_runner.proto",
}
